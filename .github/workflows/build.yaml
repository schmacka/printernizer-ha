name: Build Printernizer Home Assistant Addon

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    branches:
      - main
      - master
  release:
    types:
      - published
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: schmacka/printernizer-ha

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  information:
    name: Gather addon information
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.information.outputs.architectures }}
      build: ${{ steps.information.outputs.build }}
      description: ${{ steps.information.outputs.description }}
      name: ${{ steps.information.outputs.name }}
      slug: ${{ steps.information.outputs.slug }}
      target: ${{ steps.information.outputs.target }}
      version: ${{ steps.information.outputs.version }}
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      
      - name: 🚀 Run addon information action
        id: information
        uses: frenck/action-addon-information@v1.4.2

  lint:
    name: Lint addon
    runs-on: ubuntu-latest
    needs: information
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4
      
      - name: 🚀 Run addon linter
        uses: frenck/action-addon-linter@v2.15
        with:
          community: true
          path: "./"

  build:
    name: Build ${{ matrix.architecture }}
    runs-on: ubuntu-latest
    needs: 
      - information
      - lint
    strategy:
      matrix:
        architecture:
          - amd64
          - armv7
          - aarch64
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4

      - name: 🏗 Set up build cache
        id: cache
        uses: actions/cache@v3.3.2
        with:
          path: /tmp/.docker-cache
          key: docker-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ matrix.architecture }}-

      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0

      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: 🏗 Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: ℹ️ Compose build flags
        id: flags
        run: |
          echo "date=$(date +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT
          echo "revision=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          
          if [[ "${{ github.event_name }}" = "release" ]]; then
            echo "version=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=edge" >> $GITHUB_OUTPUT
          fi

      - name: 🚀 Build addon
        uses: home-assistant/builder@2023.09.0
        with:
          args: |
            --${{ matrix.architecture }} \
            --target . \
            --generic ${{ steps.flags.outputs.version }} \
            --docker-hub ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  publish:
    name: Publish addon
    runs-on: ubuntu-latest
    needs:
      - information
      - build
    if: github.event_name == 'release'
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4

      - name: 🚀 Publish to registry
        uses: home-assistant/builder@2023.09.0
        with:
          args: |
            --all \
            --target . \
            --generic ${{ github.event.release.tag_name }} \
            --docker-hub ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  test:
    name: Test addon on ${{ matrix.architecture }}
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'release'
    strategy:
      matrix:
        architecture:
          - amd64
          # Skip ARM testing in CI for now - will be tested manually
          # - armv7  
          # - aarch64
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4

      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0

      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: 🏗 Build test image
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/${{ matrix.architecture }}
          load: true
          tags: test/printernizer-addon:${{ matrix.architecture }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_FROM=ghcr.io/home-assistant/base-python:3.11-alpine3.18

      - name: 🧪 Test addon startup
        run: |
          # Create test directories
          mkdir -p test-data
          
          # Test container startup
          docker run --rm -d \
            --name test-printernizer \
            -v $(pwd)/test-data:/data \
            -e SUPERVISOR_TOKEN=test-token \
            -p 8000:8000 \
            test/printernizer-addon:${{ matrix.architecture }}
          
          # Wait for startup
          sleep 30
          
          # Test health endpoint
          if curl -f http://localhost:8000/api/v1/health; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            docker logs test-printernizer
            exit 1
          fi
          
          # Cleanup
          docker stop test-printernizer
          rm -rf test-data

  security:
    name: Security scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:edge
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'